/********************************************************************************* 
*
* O programa que cria uma área de memória compartilhada que será utilizada por dois
* processos. Um dos processos lê do teclado um texto (string) e a opção de conversão
* maiúscula(uppercase) ou minúscula (lowercase), e envia ao outro processo através 
* da memória compartilhada essas duas informações. A memória compartilhada armazena 
* o texto a ser convertido e a opção deconversão e a indicação de que há um novo texto 
* a ser convertido. O outro processo, uma vez quedetecte que há um novo texto a ser 
* convertido na memória compartilhada, faz conversão desejada diretamente na mesma 
* área de memória compartilhada. Quando este processo termina a conversão ele indica, 
* também por uma variável na área de memória compartilhada, que o processo de conversão 
* terminou. O primeiro processo ao detectar que isso ocorreu, imprime o texto convertido
* na tela. O programa somente faz uma leitura e conversão de texto, ou seja, após 
* cada processo encerrar suas tarefas ele encerra a execução.
*
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h> 
#include <sys/shm.h> 
#include <sys/wait.h>
#include <unistd.h>
#include <ctype.h>


#define EXTERNAL_SHM_ID 10003

#define TO_UPPERCASE 1
#define TO_LOWERCASE 2

#define MAX_TEXT_SIZE 500


struct myshm 
	{
	int	control_flag1;
	int	control_flag2;
	int	convType;
	char	textbuffer[MAX_TEXT_SIZE+1];
	};

struct myshm *pmyshm;

int shmid; 

void stroupper(char * str) 
{
  	// Convert string to upper case
  	while (*str) {
    		*str = toupper((unsigned char) *str);
    		str++;
  	}

}

void strolower(char * str) 
{
  	// Convert string to upper case
  	while (*str) {
    		*str = tolower((unsigned char) *str);
    		str++;
  	}

}

void father_proc()
{
	int optconv;

	// Processo PAI: le a opcao de conversao e o texto do usuario, 
	// depois passa essas informacoes para processo filho realizar
	// a conversaro
	printf("Entre com o texto a ser convertido:\n");
	fgets(pmyshm->textbuffer,MAX_TEXT_SIZE,stdin);
	fflush(stdin);
	printf("Qual opcao de conversao? 1 - Maiuscula; 2 - Minuscula\n");
	scanf("%d",&optconv);
	if (optconv==1)
		pmyshm->convType=TO_UPPERCASE;
	else if (optconv==2)
		pmyshm->convType=TO_LOWERCASE;
	else
		pmyshm->convType = TO_UPPERCASE;

	// Usando a flag de controle 1 avisa processo 
	// filho que dados estao prontos, 	
	pmyshm->control_flag1=1;

	// Espera que o processo filho termine a conversao,
	// usando um "spinlock" sobre a flag de controle 2
	while(pmyshm->control_flag2==0);

	printf("O texto convertido e':\n");
	puts(pmyshm->textbuffer);

	// Desconecta e libera a memoria compartilhada
	shmdt(pmyshm);
	shmctl(shmid,IPC_RMID,NULL);
}

void child_proc()
{
	// Processo FILHO: primeiro espera que o processo pai 
	// envie os dados, incluindo o tipo de conversao e o
	// texto a ser convertifo. Para tanto usa um "spinlock" 
	// sobre o flag de controle 1. Depois que os dados estao
	// prontos faz a conversao e sinaliza que terminou
	// usando a flag de controle 2
 
	// Primeiro obtem um apontador para a area de memoria
	// compartilhada
	pmyshm = shmat(shmid,NULL,0);
	if (pmyshm == (struct myshm *) -1) {
   		perror("shmat failed on child process"); 
		exit(1); 
	}
	// Espera processo pai prepar dados
	while(pmyshm->control_flag1==0);
	printf("DEBUG MSG: vai fazer conversao de tipo %d\n",pmyshm->convType);

	// Faz a conversao requerida
	if (pmyshm->convType==TO_UPPERCASE)
		stroupper(pmyshm->textbuffer);
	else
		strolower(pmyshm->textbuffer);

	// Avisa ao pai que encerrou a conversao
	pmyshm->control_flag2 = 1;
	shmdt(pmyshm);
}
void main()
{
	pid_t pid;
	shmid = shmget(EXTERNAL_SHM_ID, sizeof(struct myshm), IPC_CREAT | 0777);
	if (shmid == -1) {
   		perror("shmget failed"); 
		exit(1); 
	} 

	pmyshm = shmat(shmid,NULL,0);
	if (pmyshm == (struct myshm *) -1) {
   		perror("shmat failed in the father proc"); 
		exit(1); 
	}
	pmyshm->control_flag1=0;
	pmyshm->control_flag2=0;
		
	pid = fork();
	if (pid>0) {
		father_proc();
	} else {
		child_proc();
	}
	exit(0);	
}
